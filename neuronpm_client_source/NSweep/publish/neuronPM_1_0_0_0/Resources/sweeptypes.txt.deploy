begintemplate Parameter
	public name, type, ubound, level, value, base, increment

	strdef name, type
	objref vallist

	proc init() {
		level = 0
		name = $s1
		type = $s2
		if (strcmp(type, "list") == 0) {
			vallist = new Vector()
			vallist.append($o3)
			ubound = vallist.size() - 1
			return
		}	

		if (strcmp(type, "exp") == 0) {
			ubound = $3
			expbase = $4
			expstart = $5
			return
		}

		ubound = $3
		slope = $4
		intercept = $5
	}

	func increment() {
		level = level + 1
		if (level > ubound) {
			level = 0
			return 1
		} else {
			return 0
		}
	}

	func value() {
		if (strcmp(type, "list") == 0) {
			return vallist.x[level]
		} 
		
		if (strcmp(type, "exp") == 0) {
			return (expbase^(expstart +level))
		}

		return (level * slope) + intercept
	}

	func base() {
		return (ubound + 1)
	}
endtemplate Parameter



begintemplate ParameterList
	public Plist, count, object, increment, getruncode, maxruns, decvalue, runcode, setdec
	objref Plist
	strdef runcode

	proc init() {
		Plist = new List("Parameter")
	}

	func count() {
		return Plist.count()
	}

	obfunc object() {
		return Plist.object($1)
	}
	
	proc increment() {local x
		x = Plist.count() -1
		while (Plist.object(x).increment == 1) {
			x = x -1
			if (x < 0) {
				return
			}
		}
	}
	
	proc getruncode() {local x
		runcode = ""
		for (x = 0; x < Plist.count(); x = x + 1) {
			sprint(runcode, "%s%d", runcode, Plist.object(x).level)
		}
		
	}

	func maxruns() {local x, y
		y = 1
		for (x = 0; x < Plist.count(); x = x + 1) {
			y = y * Plist.object(x).base
		}
		return y
	}

	func decvalue() {local x, y, z
		y = 1
		z = 0
		for (x = Plist.count() - 1; x > -1; x = x - 1) {
			z = z + (y * Plist.object(x).level)
			y = y * Plist.object(x).base
		}
		return z
	}

	func setdec() {local x, y, remainder localobj basevals
		if ($1 > (maxruns()- 1)) { return 0 }
	
		basevals = new Vector(Plist.count())
		y = 1

		for(x = Plist.count() - 1; x > -1; x = x - 1) {
			basevals.x[x] = y
			y = y * Plist.object(x).base
		}
		
		remainder = $1
		for(x = 0; x < Plist.count(); x = x + 1) {
			Plist.object[x].level = int(remainder / basevals.x[x])
			remainder = remainder - (Plist.object[x].level * basevals.x[x])
		}

		return 1
	}
endtemplate ParameterList

