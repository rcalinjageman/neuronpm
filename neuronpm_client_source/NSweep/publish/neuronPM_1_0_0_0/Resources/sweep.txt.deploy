/* load the standard hoc files we need */
load_file("stdlib.hoc")
load_file("family.hoc")
load_file("shapebox.hoc")
load_file("pointbsr.hoc", "PointBrowser")
load_file("wingroup.hoc")
load_file("stdrun.hoc")
load_file("inserter.hoc")
load_file("pointman.hoc")
print "WINSWEEP - INIT - standard libraries opened"

/* load and initialize the sweep data structures */
chdir(winsweepdirectory)
load_file("sweeptypes.hoc")
objref plist
plist = new ParameterList()
print "WINSWEEP - INIT - parameter types initialized"

/* load and build the model */
objref outfile
outfile = new File()
chdir(winsweepdirectory)
chdir("models")
chdir(simdirectory)
chdir("simfiles")
load_file(simfile)
print "WINSWEEP - INIT - simulation built"

/* define the output files */
objref workfile, reportfile
strdef worktype, reportfilename, outfilename, decholder
workfile = new File()
reportfile = new File()

/* define and initialize the parameters for this sweep */

chdir(winsweepdirectory)
chdir("models")
chdir(simdirectory)
load_file(paramdeffile)
paraminit()
chdir(winsweepdirectory)
print "WINSWEEP - INIT - parameters loaded"



func getnextruncode() {
	if(strcmp(worktype, "block") == 0) {
		plist.increment()
		if (plist.decvalue() > (runstart + blocksize - 1)) {return 0 }
		if (plist.decvalue() < runstart) {return 0}
		return 1
	} else {
		if (workfile.eof()) {
			workfile.close()
			return 0 
		}
		runstart = workfile.scanvar()
		plist.setdec(runstart)
		return 1
	}
}

proc delay() {local x
 	x = startsw()
	while ((startsw() -x) < $1) {}
}

proc waitforwork() {
	while (morework == 0) {
		/* see if there is work */
		chdir(winsweepdirectory)
		chdir("models")
		chdir(simdirectory)
		chdir("work")
				
		if (workfile.ropen("work.txt") == 0) {
			delay(worktimeout)
			if(workfile.ropen("finished.txt") == 0) {
				workfile.wopen("finished.txt")
				workfile.close
			}
		} else {						
			if (workfile.eof()) {
				workfile.close()
				delay(worktimeout)
			} else {
				workfile.close
				delay(worktimeout)
				workfile.ropen("work.txt")			
				workfile.scanstr(worktype)
				if (strcmp(worktype, "block") == 0) {		
					runstart = workfile.scanvar()
					blocksize = workfile.scanvar()
					if(workfile.eof()) {
						blockfile = -99
					} else {
						blockfile = workfile.scanvar()
					}
					plist.setdec(runstart)
					print "WINSWEEP - SWEEP - new work - block ", runstart, blocksize
				}				
				morework = 1
			}						
		}							
	}								
}							

proc processwork() {
	chdir(winsweepdirectory)
	chdir("models")
	chdir(simdirectory)
	chdir("reports")
	plist.getruncode()
	if (blockfile == -99) {
		sprint(reportfilename, "%d.txt", plist.decvalue())
		sprint(outfilename, "in%d.txt", plist.decvalue())
	} else {
		sprint(reportfilename, "%d.txt", blockfile)
		sprint(outfilename, "in%d.txt", blockfile)
	}
	reportfile.aopen(reportfilename)
	outfile.aopen(outfilename)
	

	while (morework == 1) {
		paramset()
		plist.getruncode()
		outfile.printf("%s - %s - %s - %s - %f\n", simdirectory, paramdeffile, clientid, plist.runcode, plist.decvalue())	
		init()
		run()
		reportfile.printf("%s, %s, %s, %f, %f, ", simdirectory, paramdeffile, clientid, plist.decvalue(), 1 )
		paramsummary(reportfile)
		reportfile.printf("%s \n", " ")
		reportfile.flush()
		outfile.flush()
		paramrevert()
		morework = getnextruncode()
	}
	reportfile.close()
	outfile.close()
	chdir(winsweepdirectory)
	chdir("models")
	chdir(simdirectory)
	chdir("work")
	workfile.wopen("work.txt")
	workfile.close()
	workfile.wopen("finished.txt")
	workfile.close()
}


neverend = 1
while (neverend == 1) {
	waitforwork()
	processwork()
}